<?php

/**
 * @file
 * The MailQ Core Module
 */

define('MAILQ_PRIORITY_LOW', -5);
define('MAILQ_PRIORITY_NORMAL', 0);
define('MAILQ_PRIORITY_HIGH', 5);
define('MAILQ_STATUS_QUEUED', 0);
define('MAILQ_STATUS_SENDING', 1);
define('MAILQ_STATUS_SENT', 2);
define('MAILQ_STATUS_RESEND', 3);
define('MAILQ_STATUS_FAILED', 4);

if (variable_get('mailq_debug_mode', '0')) {
  define('MAILQ_DEBUG_MODE', TRUE);
}
else {
  define('MAILQ_DEBUG_MODE', FALSE);
}

/**
 * Implementation of hook_menu().
 */
function mailq_menu() {
  if (variable_get('mailq_running_batch', FALSE) && variable_get('mailq_old_smtp_library', FALSE)) {
    // If we're batch running, the smtp_library is temp. set to something else ,
    // so for other threads we need to set it back to us until the batch is
    // complete.
    variable_set('smtp_library', drupal_get_path('module', 'mailq') .'/mailq.module');
  }
  $items = array();

  $items['admin/settings/mailq'] = array(
    'title' => 'MailQ',
    'description' => 'General settings for the MailQ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailq_admin_settings'),
    'access arguments' => array('administer mailq'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/mailq'] = array(
    'title' => 'MailQ Status',
    'description' => 'Status information for MailQ',
    'page callback' => 'mailq_admin_status_page',
    'access arguments' => array('administer mailq'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/mailq/active'] = array(
    'title' => 'Active Queue',
    'description' => 'Active Mail Queue',
    'page callback' => 'mailq_admin_active_page',
    'access arguments' => array('administer mailq'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/mailq/archive'] = array(
    'title' => 'Archives',
    'description' => 'Active Mail Queue',
    'page callback' => 'mailq_admin_archive_page',
    'access arguments' => array('administer mailq'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/mailq/view'] = array(
    'title' => 'View Mail Item',
    'description' => 'View a Mail Item',
    'page callback' => 'mailq_admin_view_mail',
    'access arguments' => array('administer mailq'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/mailq/archive_push'] = array(
    'title' => 'Archive Mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailq_admin_archive_push_confirm_form'),
    'access arguments' => array('administer mailq'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Administration settings for MailQ
 */
function mailq_admin_settings() {
  $form = array();

  $path = drupal_get_path('module', 'mailq') .'/mailq.module';
  if (variable_get('smtp_library', '') != $path) {
    $enable_disable_msg = t('Enable MailQ');
  }
  else {
    $enable_disable_msg = t('Disable MailQ');
  }
  $form['module_status'] = array(
    '#type' => t('submit'),
    '#value' => $enable_disable_msg,
  );

  $batch_range = drupal_map_assoc(range(10, 100, 10));
  $batch_range += drupal_map_assoc(range(100, 1000, 100));
  $batch_range += drupal_map_assoc(range(1000, 10000, 1000));
  $batch_range += drupal_map_assoc(range(10000, 100000, 10000));
  $form['mailq_batch_size'] = array(
    '#type' => 'select',
    '#title' => t('Batch Size'),
    '#description' => t('This is how many emails MailQ will attempt to send in
                        each batch.'),
    '#default_value' => variable_get('mailq_batch_size', 100),
    '#options' => $batch_range,
  );

  $try_range = drupal_map_assoc(range(1, 10, 1));
  $form['mailq_max_try'] = array(
    '#type' => 'select',
    '#title' => t('Max Attempts'),
    '#description' => t('This is the maximum number of times MailQ should try to
      send a message if sending fails.'),
    '#default_value' => variable_get('mailq_max_try', 3),
    '#options' => $try_range,
  );

  $sendmail_libs = array(t('[Drupal Default]'));
  $sendmail_libs += array('queue_only' => t('[QUEUE MAIL ONLY DO NOT SEND]'));
  $cached_libs = variable_get('mailq_send_mail_libs', serialize(array()));
  $cached_libs = unserialize($cached_libs);
  $sendmail_libs += $cached_libs;
  unset($cached_libs);

  $form['mailq_send_library'] = array(
    '#type' => 'select',
    '#title' => t('Send Mail Library'),
    '#description' => t('This is the sendmail library to use when sending
      email.'),
    '#default_value' => variable_get('mailq_send_library', ''),
    '#options' => $sendmail_libs,
  );
  $form['mailq_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug Mode'),
    '#default_value' => variable_get('mailq_debug_mode', '1'),
    '#description' => t('Check this to get detailed debug messages in log.'),
  );
  $form['mailq_save'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  );
  $form['mailq_rebuild_lib_cache'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Drupal Mail Libraries'),
  );
  return $form;
}

/**
 * Submit handler for the admin settings form.
 */
function mailq_admin_settings_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  if ($op == t('Enable MailQ')) {
    variable_set('mailq_old_smtp_library', variable_get('smtp_library', ''));
    variable_set('smtp_library', drupal_get_path('module', 'mailq') .'/mailq.module');
    db_query("UPDATE {system} SET weight = -1 WHERE type = 'module' AND name = 'mailq'");
    drupal_set_message(t('MailQ has been enabled.'));
    if (MAILQ_DEBUG_MODE) {
      watchdog(
        'mailq',
        'Storing old smtp library "@oldsmtp".',
        array(
          '@oldsmtp' => variable_get('mailq_old_smtp_library', ''),
        ),
        WATCHDOG_DEBUG
      );
    }
    return;
  }
  elseif ($op == t('Disable MailQ')) {
    if (MAILQ_DEBUG_MODE) {
      watchdog(
        'mailq',
        'Restoring old smtp library "@oldsmtp".',
        array(
          '@oldsmtp' => variable_get('mailq_old_smtp_library', ''),
        ),
        WATCHDOG_DEBUG
      );
    }
    variable_set('smtp_library', variable_get('mailq_old_smtp_library', ''));
    variable_del('mailq_old_smtp_library');
    drupal_set_message(t('MailQ has been disabled.'));
    return;
  }
  elseif ($op == t('Rebuild Drupal Mail Libraries')) {
    /**
     * Make the smtp_library var null, and read each file module file
     * loooking for the drupal_mail_wrapper function.
     */
    $modules = module_list();
    $mail_files = array();
    foreach ($modules as $module) {
      $path = drupal_get_path('module', $module);
      $mail_files += _mailq_locate_mail_functions($path);
    }
    // Take us out
    unset($mail_files[drupal_get_path('module', 'mailq') .'/mailq.module']);
    variable_set('mailq_send_mail_libs', serialize($mail_files));
    drupal_set_message(t('Drupal Mail Libraries Cache has been rebuilt.'));
    return;
  }
  variable_set('mailq_batch_size', $form_state['values']['mailq_batch_size']);
  variable_set('mailq_send_library', $form_state['values']['mailq_send_library']);
  variable_set('mailq_debug_mode', $form_state['values']['mailq_debug_mode']);
  variable_set('mailq_max_try', $form_state['values']['mailq_max_try']);
  drupal_set_message(t('You settings have been updated.'));
  return;
}

/**
 * MailQ Status Administration Page
 */
function mailq_admin_status_page() {
  $page = '<h2>'. t('Current MailQ Status') .'</h2>';
  $row = array();
  $rows = array();
  $header = array(t('Name'), t('Value'));

  $row = array();
  $row[] = t('Messages in Queue');
  $row[] = db_result(db_query('SELECT COUNT(*) FROM {mailq_active_queue}'));
  $rows[] = $row;

  $row = array();
  $row[] = t('Messages Unsent');
  $row[] = db_result(db_query(
    'SELECT COUNT(*) FROM {mailq_active_queue} '.
      'WHERE queue_status <> %d',
    MAILQ_STATUS_SENT
  ));
  $rows[] = $row;

  $row = array();
  $row[] = t('Archive Messages');
  $row[] = db_result(db_query('SELECT COUNT(*) FROM {mailq_archive}'));
  $rows[] = $row;

  $page .= theme('table', $header, $rows, NULL, t('MailQ Information'));
  return $page;
}

/**
 * MailQ Status page for the Archive.
 */
function mailq_admin_archive_page() {
  $page .= '<h2>'. t('Archive Information') .'</h2>';
  $row = array();
  $rows = array();
  $header = array(
    array('field' => 'mailkey',
          'data' => t('Mail Key'),
    ),
    array('field' => 'subject',
          'data' => t('Subject'),
    ),
    array('field' => 'queue_date',
          'data' => t('Queue Date'),
    ),
    array('field' => 'queue_sent',
          'data' => t('Send Date'),
    ),
    t('Status'),
    array('field' => 'queue_priority',
          'data' => t('Priority'),
    ),
  );
  $rs = pager_query(
    'SELECT mailkey, subject, queue_date, '.
      'queue_status, queue_send, queue_sent, queue_priority '.
    'FROM {mailq_archive} ' . tablesort_sql($header), 50);
  $db_rows = db_result(db_query('SELECT COUNT(*) FROM {mailq_archive}'));
  if ($db_rows == 0) {
    $page .= '<h3>'. t('Nothing is currently in the queue.') .'</h3>';
    return $page;
  }
  while ($queue = db_fetch_object($rs)) {
    $row = array();
    $row[] = $queue->mailkey;
    $row[] = $queue->subject;
    $row[] = format_date($queue->queue_date);
    $row[] = $queue->queue_sent != 0 ? format_date($queue->queue_sent) : t('N/A');
    $row[] = _mailq_lookup_status($queue->queue_status);
    $row[] = _mailq_lookup_priority($queue->queue_priority);
    $rows[] = $row;
  }
  $page .= theme('table', $header, $rows);
  $page .= theme_pager();
  return $page;
}

/**
 * MailQ Status page for the Active Queue
 */
function mailq_admin_active_page() {
  $page .= '<h2>'. t('Active Queue Information') .'</h2>';
  $page .= drupal_get_form('mailq_admin_archive_push_form');
  $row = array();
  $rows = array();
  $header = array(
    array('field' => 'mailkey',
          'data' => t('Mail Key'),
    ),
    array('field' => 'subject',
          'data' => t('Subject'),
    ),
    array('field' => 'queue_date',
          'data' => t('Queued Date'),
    ),
    array('field' => 'queue_sent',
          'data' => t('Sent Date'),
    ),
    t('Status'),
    array('field' => 'queue_priority',
          'data' => t('Priority'),
    ),
  );
  $rs = pager_query(
    'SELECT '.
      'mailkey, subject, queue_date, queue_status, '.
      'queue_sent, queue_priority '.
    'FROM {mailq_active_queue} '. tablesort_sql($header),
    50
  );

  $db_rows = db_result(db_query(
    'SELECT COUNT(*) FROM {mailq_active_queue}'
  ));

  if ($db_rows == 0) {
    $page .= '<h3>'. t('Nothing is currently in the queue.') .'</h3>';
    return $page;
  }
  while ($queue = db_fetch_object($rs)) {
    $row = array();
    $row[] = $queue->mailkey;
    $row[] = $queue->subject;
    $row[] = format_date($queue->queue_date);
    $row[] = $queue->queue_sent != 0 ? format_date($queue->queue_sent) : t('N/A');
    $row[] = _mailq_lookup_status($queue->queue_status);
    $row[] = _mailq_lookup_priority($queue->queue_priority);
    $rows[] = $row;
  }
  $page .= theme('table', $header, $rows);
  $page .= theme_pager();
  return $page;
}

/**
 * Form to push mail to the archive
 */
function mailq_admin_archive_push_form() {
  $form = array();
  $form['arch_sec'] = array(
    '#title' => t('Archive Push'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Select status type to push
  $form['arch_sec']['push_status'] = array(
    '#title' => t('Mail to Archive'),
    '#description' => t('Select a status type to push to the archives.'),
    '#type' => 'select',
    '#options' => _mailq_lookup_status(),
  );
  $form['arch_sec']['op_arch'] = array(
    '#type' => 'submit',
    '#value' => t('Archive Mail'),
  );
  return $form;
}

/**
 * hook_submit for pushing to the archives
 */
function mailq_admin_archive_push_form_submit($form, &$form_state) {
  drupal_goto('admin/mailq/archive_push/'. $form_state['values']['push_status']);
  return;
}

/**
 * Confirmation form to arvhice mail items.
 */
function mailq_admin_archive_push_confirm_form() {
  $form = array();
  $form['push_status'] = array(
    '#type' => 'hidden',
    '#value' => arg(3),
  );
  return confirm_form(
    $form,
    t('Are you sure you with to archive these mail items?'),
    'admin/mailq/active',
    t('This will NOT delete the mail items, but move them to the archive. However the mail items will no longer be sent. '.
      'They are archived for historical purposes.')
  );
}

/**
 * hook_submit for confirmation form to arvhice items.
 */
function mailq_admin_archive_push_confirm_form_submit($form, &$form_state) {
  $push_count = db_result(db_query(
    "SELECT COUNT(*) FROM {mailq_active_queue} ".
      "WHERE queue_status = %d ",
    $form_state['values']['push_status']
  ));
  $try = db_query(
    "INSERT INTO {mailq_archive} ".
      "(".
        "mailq_id, mailkey, header, sender, ".
        "recpt, subject, body, queue_date, ".
        "queue_send, queue_sent, queue_attempts, queue_engine_used, ".
        "queue_priority, queue_status, archive_stamp ".
      ")".
      "SELECT ".
        "mailq_id, mailkey, header, sender, ".
        "recpt, subject, body, queue_date, ".
        "queue_send, queue_sent, queue_attempts, queue_engine_used, ".
        "queue_priority, queue_status, %d ".
      "FROM {mailq_active_queue} ".
      "WHERE queue_status = %d ",
    time(),
    $form_state['values']['push_status']
  );
  if ($try) {
    db_query(
      "DELETE FROM {mailq_active_queue} WHERE queue_status = %d",
      $form_state['values']['push_status']
    );
  }

  drupal_set_message(t(
    '!item_count mail !plural_items have been pushed to the archive.',
    array(
      '!item_count' => $push_count,
      '!plural_items' => format_plural($push_count, t('item'), t('items'))
    )
  ));
  $form_state['redirect'] = 'admin/mailq';
}

/**
 * Implementation of hook_cron().
 */
function mailq_cron() {
  // See if mailq is enabled
  if (variable_get('mailq_old_smtp_library', NULL) === NULL || variable_get('mailq_send_library', 'drupal_default') == 'queue_only' ) {
    if (MAILQ_DEBUG_MODE) {
      watchdog(
        'mailq',
        'Returning from mailq because mailq is not enabled.',
        array(),
        WATCHDOG_DEBUG
      );
    }
    return;
  }
  if (function_exists('drupal_mail_wrapper')) {
    $func = 'drupal_mail_wrapper';
  }
  else {
    $func = 'drupal_mail';
  }

  $rs = db_query_range(
    "SELECT * FROM {mailq_active_queue} ".
      "WHERE (queue_status <> %d AND queue_status <> %d) ".
      "ORDER BY queue_priority DESC ",
    MAILQ_STATUS_SENT, MAILQ_STATUS_FAILED, 0, variable_get('mailq_batch_size', 10)
  );
  $max_attempts = variable_get('mailq_max_try', 3);
  while ($row = db_fetch_object($rs)) {
    $try = FALSE;
    $row->header = unserialize($row->header);
    $message = array();
    $message['mailkey'] =  $row->mailkey;
    $message['headers'] =  $row->header;
    $message['from'] =  $row->sender;
    $message['to'] =  $row->recpt;
    $message['subject'] = $row->subject;
    $message['body'] = $row->body;

    if ($func == 'drupal_mail_wrapper') {
      $try = drupal_mail_wrapper($message);
    }

    if ($func == 'drupal_mail') {
      $try = drupal_mail('mailq', 'mailq', $row->recpt, user_preferred_language($account), $message);
    }

    if ($try) {
      if (MAILQ_DEBUG_MODE) {
        watchdog(
          'mailq',
          'Successfully sent mail from @from to @to with subject @subject using @func',
          array(
            '@from' => $message['mailkey'],
            '@to' => $message['to'],
            '@subject' => $message['subject'],
            '@func' => $func,
          ),
          WATCHDOG_DEBUG
        );
      }
      db_query(
        "UPDATE {mailq_active_queue} ".
          "SET queue_attempts = %d, queue_status = %d, queue_sent = %d ".
          "WHERE mailq_id = %d ",
        $row->queue_attempts + 1, MAILQ_STATUS_SENT, time(), $row->mailq_id
      );
    }
    elseif ($row->queue_attemps >= $max_attempts) {
      if (MAILQ_DEBUG_MODE) {
        watchdog(
          'mailq',
          'Sending failed for mail from @from to @to with subject @subject using @func',
          array(
            '@from' => $message['mailkey'],
            '@to' => $message['to'],
            '@subject' => $message['subject'],
            '@func' => $func,
          ),
          WATCHDOG_DEBUG
        );
      }
      db_query(
        "UPDATE {mailq_active_queue} ".
          "SET queue_attempts = %d, queue_status = %d ".
          "WHERE mailq_id = %d ",
        $row->queue_attempts + 1, MAILQ_STATUS_FAILED, $row->mailq_id
      );
    }
    else {
      if (MAILQ_DEBUG_MODE) {
        watchdog(
          'mailq',
          'Requeued mail from @from to @to with subject @subject using @func',
          array(
            '@from' => $message['mailkey'],
            '@to' => $message['to'],
            '@subject' => $message['subject'],
            '@func' => $func,
          ),
          WATCHDOG_DEBUG
        );
      }
      db_query(
        "UPDATE {mailq_active_queue} ".
          "SET queue_attempts = %d, queue_status = %d ".
          "WHERE mailq_id = %d ",
        $row->queue_attempts + 1, MAILQ_STATUS_RESEND, $row->mailq_id
      );
    }
  }
  // Queue any further messages to be generated from other modules
  variable_set('smtp_library', drupal_get_path('module', 'mailq') .'/mailq.module');
  return;
}

/**
 * Implementation of hook_mail().
 */
function mailq_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  switch ($key) {
    case 'mailq':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['mailkey'] =  $params['mailkey'];
      $message['headers'] = $params['headers'];
      $message['from'] =  $params['from'];
      $message['to'] =  $params['to'];
      if (MAILQ_DEBUG_MODE) {
        watchdog(
          'mailq',
          'hook_mail() called for mail to @to with subject @subject',
          array(
            '@to' => $message['to'],
            '@subject' => $message['subject'],
          ),
          WATCHDOG_DEBUG
        );
      }
      break;
    default:
      if (MAILQ_DEBUG_MODE) {
        watchdog(
          'mailq',
          'hook_mail() called for key @key',
          array(
            '@key' => $key,
          ),
          WATCHDOG_DEBUG
        );
      }
  }
}

/**
 * MailQ Helper Functions.
 */
function _mailq_locate_mail_functions($path) {
  $d = dir($path);
  $found = array();

  while (false !== ($entry = $d->read())) {
    if ($entry != '.' && $entry != '..' && !is_dir($d->path .'/'. $entry)) {
      $info = file_get_contents($d->path .'/'. $entry);
      $lookup = strpos($info, 'function drupal_mail_wrapper');
      if (is_numeric($lookup)) {
        $found[$d->path .'/'.  $entry] = $entry;
      }
    }
    if ($entry != '' && $entry != '.' && $entry != '..' && is_dir($d->path .'/'. $entry)) {
      $found += _mailq_locate_mail_functions($d->path .'/'. $entry);
    }
  }
  return $found;
}

/**
 * Converts a status code to a string.
 */
function _mailq_lookup_status($status_code = NULL) {
  $codes = array(
    0 => t('Queued'),
    1 => t('Sending'),
    2 => t('Sent'),
    3 => t('Resending'),
    4 => t('FAILED'),
  );
  if ($status_code === NULL) {
    return $codes;
  }
  return $codes[$status_code];
}

/**
 * Converts a priority to a string.
 */
function _mailq_lookup_priority($priority_code = NULL) {
  $codes = array(
    -5 => t('LOW'),
    0 => t('NORMAL'),
    5 => t('HIGH'),
  );
  if ($priority_code === NULL) {
    return $codes;
  }
  return $codes[$priority_code];
}

/**
 * Our Mail Wapper Queues the mail up in our active_queue table.
 * During a cron run, the mail will be sent.
 * Cron could be run from cron.php or from 'admin/logs/status/run-cron'
 */
if (!$GLOBALS['cron_run'] && $_GET['q'] != 'admin/reports/status/run-cron' && (request_uri() != '/cron.php')) {
  function drupal_mail_wrapper(&$message) {
    if (MAILQ_DEBUG_MODE) {
      watchdog(
        'mailq',
        'Queued mail to @to with message id @id and subject @subject',
        array(
          '@to' => $message['to'],
          '@id' => $message['id'],
          '@subject' => $message['subject'],
        ),
        WATCHDOG_DEBUG
      );
    }
    // Place this into the queue
    $current_smtp_lib = variable_get('mailq_send_library', '');
    if ($current_smtp_lib == '') {
      $current_smtp_lib = 'drupal_default';
    }
    $headers = serialize($message['headers']);
    $drupal_sender = variable_get('site_mail', 'drupal@localhost');
    $queued = db_query(
      "INSERT INTO {mailq_active_queue} ".
        "(".
          "mailkey, header, sender, recpt, ".
          "subject, body, queue_date, queue_send, ".
          "queue_attempts, queue_engine_used, queue_priority, queue_status ".
        ") ".
        "VALUES ".
        "(".
          "'%s', '%s', '%s', '%s', ".
          "'%s', '%s', %d, %d, ".
          "%d, '%s', %d, %d ".
        ") ",
      $message['id'], $headers, $message['from'], $message['to'],
      $message['subject'], $message['body'], time(), 0,
      0, $current_smtp_lib, MAILQ_PRIORITY_NORMAL, MAILQ_STATUS_QUEUED
    );
    return $queued;
  }
}
else {
  // Set correct mail sender library
  //TODO: Any message sent from other threads while cron is running
  //is not going to go via mailq
  variable_set('smtp_library', variable_get('mailq_send_library', NULL));

  function _mailq_batch_shutdown() {
    $mailq_path = drupal_get_path('module', 'mailq') .'/mailq.module';
    variable_set('smtp_library', $mailq_path);
    variable_del('mailq_running_batch');
    if (MAILQ_DEBUG_MODE) {
      watchdog(
        'mailq',
        'Setting mailq back as the smtp provider.',
        array(),
        WATCHDOG_DEBUG
      );
    }
  }
  register_shutdown_function('_mailq_batch_shutdown');
}
